@using EasyMicroservices.UI.BlazorComponents
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Events
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Generators
@using MudBlazor
@using System.Collections.ObjectModel
@using TemplateGenerators.GeneratedServices
@inject FormItemEventsListViewModel viewModel;

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudDataGrid T="FormItemEventContract" Items="viewModel.FormItemEvents">
        <ToolBarContent>
            <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddFormItemEventDialog()" />
            </MudStack>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Event.Name" Title="@viewModel.GetInnerTranslatedByKey("Event")" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateFormItemEventDialog(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>


    <SaveChangeBaseDialog TItem="FormItemEventContract" @ref="addOrUpdateDialog" BindViewModel="@viewModel">
        <DialogContent>
            <AddOrUpdateFormItemEvent @ref="AddOrUpdateFormItemEventView" />
        </DialogContent>
    </SaveChangeBaseDialog>

    <DeleteBaseDialog TItem="FormItemEventContract" @ref="deleteDialog" BindViewModel="@viewModel" />
</MudRTLProvider>

@code {
    public FormItemEventsListViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    protected override void OnInitialized()
    {
        ViewModel.BindPropertyChanged(StateHasChanged);
        base.OnInitialized();
    }

    [Parameter]
    [Category("Behavior")]
    public FormItemEventContract SelectedFormItemEvent
    {
        get
        {
            return ViewModel.SelectedFormItemEvent;
        }
        set
        {
            ViewModel.SelectedFormItemEvent = value;
        }
    }

    AddOrUpdateFormItemEvent AddOrUpdateFormItemEventView;
    SaveChangeBaseDialog<FormItemEventContract> addOrUpdateDialog;
    DeleteBaseDialog<FormItemEventContract> deleteDialog;

    void ShowAddFormItemEventDialog()
    {
        addOrUpdateDialog.ShowSaveDialog(null, (i) =>
        {
            return viewModel.Add(AddOrUpdateFormItemEventView.ViewModel.GetFormItemEvent());
        }, () =>
        {
            AddOrUpdateFormItemEventView?.ViewModel?.Clear();
        });
    }

    void ShowUpdateFormItemEventDialog(FormItemEventContract formItemEvent)
    {
        addOrUpdateDialog.ShowSaveDialog(formItemEvent, (i) =>
        {
            return viewModel.Update(i, AddOrUpdateFormItemEventView.ViewModel.GetFormItemEvent(i));
        }, () =>
        {
            AddOrUpdateFormItemEventView.ViewModel.SelectedEvent = AddOrUpdateFormItemEventView.EventsView.ViewModel.Events.FirstOrDefault(x => x.Id == formItemEvent.EventId);
            AddOrUpdateFormItemEventView.ViewModel.SelectForUpdate(formItemEvent);
        });
    }

    void ShowDeleteDialog(FormItemEventContract formItemEvent)
    {
        deleteDialog.ShowDeleteDialog(formItemEvent, viewModel.DoDelete);
    }
}
