@page "/AddOrUpdateFormItem"
@using EasyMicroservices.UI.BlazorComponents
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.Blazor.Pages.Events
@using EasyMicroservices.UI.TemplateGenerator.Blazor.Pages.Generators
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.FormItems;
@using MudBlazor
@using global::TemplateGenerators.GeneratedServices;
@inject AddOrUpdateFormItemViewModel viewModel;
@inject ISnackbar Snackbar

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudStack>
        <MudPaper Class="pa-4">
            <MudStack Spacing="4">
                <MudTextField Disabled="@viewModel.IsDisabled" @bind-Value="viewModel.Title" Label="@viewModel.GetInnerTranslatedByKey("Title")" Variant="Variant.Text"></MudTextField>
                <MudTextField Disabled="@viewModel.IsDisabled" @bind-Value="viewModel.VariableName" Label="@viewModel.GetInnerTranslatedByKey("VariableName")" Variant="Variant.Text"></MudTextField>
                <MudSelect Disabled="@viewModel.IsDisabled" @bind-Value="viewModel.Type" Label="@viewModel.GetInnerTranslatedByKey("Type")" OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary">
                    @foreach (ItemType item in Enum.GetValues<ItemType>())
                    {
                        if ((int)item < 6)
                            continue;
                        <MudSelectItem Value="@item">@viewModel.GetInnerTranslatedByKey(@item.ToString())</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Disabled="@viewModel.IsDisabled" @bind-Value="viewModel.DefaultValue" Label="@viewModel.GetInnerTranslatedByKey("DefaultValue")" Variant="Variant.Text"></MudTextField>
                <MudSelect @bind-Value="viewModel.SelectedNoParentFormItem" Label="@viewModel.GetInnerTranslatedByKey("OtherComponent")" OpenIcon="@Icons.Material.Filled.LocalDrink" AdornmentColor="Color.Secondary" Clearable>
                    @foreach (var item in viewModel.NoParentFormItems)
                    {
                        <MudSelectItem Value="@item">@item.Title</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudPaper>
        <MudTabs Elevation="4" Rounded="true" KeepPanelsAlive="true" Color="@Color.Primary">
            <MudTabPanel Text="@viewModel.GetInnerTranslatedByKey("FormItems")">
                <MudDataGrid T="FormItemContract" Items="viewModel.FormItems">
                    <ToolBarContent>
                        <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                            <MudFab Disabled="@viewModel.IsDisabled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddFormItemItemDialog()" />
                        </MudStack>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate>
                                <MudIconButton Disabled="@viewModel.IsDisabled" Size="@Size.Small" Icon="@Icons.Material.Outlined.KeyboardArrowUp" OnClick="(arg) => viewModel.OrderingFormItems.MoveUp(context.Item)" />
                                <MudIconButton Disabled="@viewModel.IsDisabled" Size="@Size.Small" Icon="@Icons.Material.Outlined.KeyboardArrowDown" OnClick="(arg) => viewModel.OrderingFormItems.MoveDown(context.Item)" />
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Index" Title="@viewModel.GetInnerTranslatedByKey("Index")" />
                        <PropertyColumn Property="x => viewModel.GetTitle(x)" Title="@viewModel.GetInnerTranslatedByKey("Title")" />
                        <PropertyColumn Property="x => x.Type" />
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate>
                                <MudIconButton Disabled="@viewModel.IsDisabled" Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateFormItemItemDialog(context.Item)" />
                                <MudIconButton Disabled="@viewModel.IsDisabled" Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
            <MudTabPanel Text="@viewModel.GetInnerTranslatedByKey("Events")">
                <FormItemEventsList @ref="formItemEventsList" @bind-FormItemEvents="@viewModel.FormItemEvents" />
            </MudTabPanel>
        </MudTabs>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SaveCommand.Execute(null)">
            @if (viewModel.IsBusy)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Saving")</MudText>
            }
            else
            {
                <MudText>@viewModel.GetInnerTranslatedByKey("Save")</MudText>
            }
        </MudButton> 
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Shower" Color="Color.Info" OnClick="(arg) => previewDialog.ShowDialog()">
            <MudText>@viewModel.GetInnerTranslatedByKey("ShowPreview")</MudText>
        </MudButton>
    </MudStack>
    <BaseDialog @ref="addDialog">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Add
            </MudText>
        </TitleContent>
        <DialogContent>
            <AddOrUpdateFormItem @ref="AddOrUpdateFormItemView" />
        </DialogContent>
    </BaseDialog>
    <BaseDialog @ref="deleteDialog">
        <TitleContent>
            <MudText>
                    @viewModel.GetInnerTranslatedByKey("DeleteFormItem_Title")
            </MudText>
        </TitleContent>
        <DialogContent>
            @viewModel.GetInnerTranslatedByKey("DeleteQuestion_Content")
        </DialogContent>
        <DialogActions>
            @if (!viewModel.IsBusy)
            {
                <MudButton OnClick="() => deleteDialog.CloseDialog()">@viewModel.GetInnerTranslatedByKey("Cancel")</MudButton>
            }
            <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="()=>DoDelete()">
                @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Deleting")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetInnerTranslatedByKey("Delete")</MudText>
                }
            </MudButton>
        </DialogActions>
    </BaseDialog>
    <BaseDialog @ref="previewDialog">
        <TitleContent>
            <MudText>
                @viewModel.GetInnerTranslatedByKey("PreviewFormItem_Title")
            </MudText>
        </TitleContent>
        <DialogContent>
            <FormItemListGenerator FormItems="@viewModel.FormItems"></FormItemListGenerator>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => previewDialog.CloseDialog()">@viewModel.GetInnerTranslatedByKey("Ok")</MudButton>
        </DialogActions>
    </BaseDialog>
</MudRTLProvider>
    @code {
    public AddOrUpdateFormItemViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    BaseDialog addDialog;
    BaseDialog deleteDialog; 
    BaseDialog previewDialog; 
    AddOrUpdateFormItem AddOrUpdateFormItemView { get; set; }
    FormItemEventsList formItemEventsList { get; set; }
    protected override Task OnInitializedAsync()
    {
        viewModel.BindPropertyChanged(StateHasChanged);
        _ = viewModel.LoadConfig();
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    void ShowAddFormItemItemDialog()
    {
        addDialog.ShowDialog(() =>
        {
            AddOrUpdateFormItemView.ViewModel.Clear();
            AddOrUpdateFormItemView.ViewModel.OnSuccess = (contract) =>
            {
                viewModel.FormItems.Add(contract);
                addDialog.CloseDialog();
                Snackbar.Add("ثبت با موفقیت انجام شد.", Severity.Success);
                viewModel.OrderingFormItems.ReOrderIndexes();
                StateHasChanged();
            };
        });
    }

    void ShowUpdateFormItemItemDialog(FormItemContract formItemContract)
    {
        addDialog.ShowDialog(() =>
        {
            AddOrUpdateFormItemView.ViewModel.Clear();
            AddOrUpdateFormItemView.ViewModel.UpdateFormItemContract = formItemContract;
            //if (formItemContract.Events != null)
            //    viewModel.FormItemEvents = formItemEventsList.FormItemEvents = new System.Collections.ObjectModel.ObservableCollection<FormItemEventContract>(formItemContract.Events);
            AddOrUpdateFormItemView.ViewModel.OnSuccess = (item) =>
            {
                var index = viewModel.FormItems.IndexOf(formItemContract);
                viewModel.FormItems.Remove(formItemContract);
                viewModel.FormItems.Insert(index, item);
                addDialog.CloseDialog();
                Snackbar.Add("ویرایش با موفقیت انجام شد.", Severity.Success);
                viewModel.OrderingFormItems.ReOrderIndexes();
                StateHasChanged();
            };
        });
    }

    void ShowDeleteDialog(FormItemContract formItemContract)
    {
        viewModel.DeleteFormItemContract = formItemContract;
        deleteDialog.ShowDialog();
    }

    void DoDelete()
    {
        viewModel.OnDelete = (o) =>
        {
            deleteDialog.CloseDialog();
            viewModel.OrderingFormItems.ReOrderIndexes();
            StateHasChanged();
            Snackbar.Add(viewModel.GetInnerTranslatedByKey("DeleteForm_Message"), Severity.Success);
        };
        viewModel.DeleteCommand.Execute(viewModel.DeleteFormItemContract);
    }
}