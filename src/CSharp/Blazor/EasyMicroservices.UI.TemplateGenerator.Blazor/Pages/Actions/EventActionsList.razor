@using EasyMicroservices.UI.BlazorComponents
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Actions
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Events
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Generators
@using MudBlazor
@using System.Collections.ObjectModel
@using TemplateGenerators.GeneratedServices
@inject EventActionsListViewModel viewModel;

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudDataGrid T="FormItemEventActionContract" Items="viewModel.Children">
        <ToolBarContent>
            <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddActionDialog()" />
                <MudText Typo="Typo.h6" mar>
                    @viewModel.GetInnerTranslatedByKey("Actions")
                </MudText>
            </MudStack>
        </ToolBarContent>
        <Columns>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.KeyboardArrowUp" OnClick="(arg) => viewModel.IndexOrderingActions.MoveUp(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.KeyboardArrowDown" OnClick="(arg) => viewModel.IndexOrderingActions.MoveDown(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.OrderIndex" Title="@viewModel.GetInnerTranslatedByKey("Index")" />
            <PropertyColumn Property="x => viewModel.GetInnerTranslatedByKey(x.Action.JobName)" Title="@viewModel.GetInnerTranslatedByKey("Job")" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateDialog(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <SaveChangeBaseDialog TItem="FormItemEventActionContract" @ref="addOrUpdateActionDialog" BindViewModel="@viewModel">
        <DialogContent>
            <AddOrUpdateEventAction @ref="AddOrUpdateEventActionView" />
        </DialogContent>
    </SaveChangeBaseDialog>

    <DeleteBaseDialog TItem="FormItemEventActionContract" @ref="deleteDialog" BindViewModel="@viewModel"/>
</MudRTLProvider>

@code {
    public EventActionsListViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    protected override void OnInitialized()
    {
        ViewModel.BindPropertyChanged(StateHasChanged);
        base.OnInitialized();
    }

    SaveChangeBaseDialog<FormItemEventActionContract> addOrUpdateActionDialog;
    DeleteBaseDialog<FormItemEventActionContract> deleteDialog;
    AddOrUpdateEventAction AddOrUpdateEventActionView;
    Actions actionsView;

    void ShowAddActionDialog()
    {
        addOrUpdateActionDialog.ShowSaveDialog(null, (i) =>
        {
            viewModel.Children.Add(AddOrUpdateEventActionView.ViewModel.GetEventAction());
            return true;
        });
    }

    void ShowDeleteDialog(FormItemEventActionContract item)
    {
        deleteDialog.ShowDeleteDialog(item, (i) =>
        {
            viewModel.Children.Remove(item);
            return true;
        });
    }

    void ShowUpdateDialog(FormItemEventActionContract item)
    {
        addOrUpdateActionDialog.ShowSaveDialog(item, (i) =>
        {
            viewModel.Children.Remove(item);
            viewModel.Children.Add(AddOrUpdateEventActionView.ViewModel.GetEventAction());
            return true;
        }, () =>
        {
            AddOrUpdateEventActionView.ViewModel.SelectedAction = AddOrUpdateEventActionView.ActionsView.ViewModel.Actions.FirstOrDefault(x => x.Id == item.ActionId);
            AddOrUpdateEventActionView.ViewModel.SelectForUpdate(item);
        });
    }
}
