@using EasyMicroservices.UI.BlazorComponents
@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Actions
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Events
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Generators
@using MudBlazor
@using TemplateGenerators.GeneratedServices
@inject EventActionsListViewModel viewModel;

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudDataGrid T="FormItemEventActionContract" Items="viewModel.Children">
        <ToolBarContent>
            <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddActionDialog()" />
                <MudText Typo="Typo.h6" mar>
                    @viewModel.GetLanguage("Actions")
                </MudText>
            </MudStack>
        </ToolBarContent>
        <Columns>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.KeyboardArrowUp" OnClick="(arg) => viewModel.IndexOrderingActions.MoveUp(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.KeyboardArrowDown" OnClick="(arg) => viewModel.IndexOrderingActions.MoveDown(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.OrderIndex" Title="@viewModel.GetLanguage("Index")" />
            <PropertyColumn Property="x => viewModel.GetLanguage(x.Action.JobName)" Title="@viewModel.GetLanguage("Job")" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateDialog(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <BaseDialog @ref="addOrUpdateActionDialog">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
                Add
            </MudText>
        </TitleContent>
        <DialogContent>
            <AddOrUpdateEventAction @ref="AddOrUpdateEventActionView" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => addOrUpdateActionDialog.CloseDialog()">
                @viewModel.GetLanguage("Cancel")
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="()=>Save()">
                <MudText>
                    @viewModel.GetLanguage("Save")
                </MudText>
            </MudButton>
        </DialogActions>
    </BaseDialog>

    <BaseDialog @ref="deleteDialog">
        <TitleContent>
            <MudText>
                @viewModel.GetLanguage("DeleteAction_Title")
            </MudText>
        </TitleContent>
        <DialogContent>
            @viewModel.GetLanguage("DeleteQuestion_Content")
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => deleteDialog.CloseDialog()">
                @viewModel.GetLanguage("Cancel")
            </MudButton>
            <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="DoDelete">
                <MudText>
                    @viewModel.GetLanguage("Delete")
                </MudText>
            </MudButton>
        </DialogActions>
    </BaseDialog>
</MudRTLProvider>

@code {
    public EventActionsListViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    protected override void OnInitialized()
    {
        ViewModel.BindPropertyChanged(StateHasChanged);
        base.OnInitialized();
    }

    BaseDialog addOrUpdateActionDialog;
    BaseDialog deleteDialog;
    AddOrUpdateEventAction AddOrUpdateEventActionView;
    Actions actionsView;

    void ShowAddActionDialog()
    {
        ViewModel.CurrentFormItemAction = currentUpdate = null;
        addOrUpdateActionDialog.ShowDialog();
    }

    void Save()
    {
        if (AddOrUpdateEventActionView.ViewModel.SelectedAction != null)
        {
            if (currentUpdate != null)
                viewModel.Children.Remove(currentUpdate);
            viewModel.Children.Add(AddOrUpdateEventActionView.ViewModel.GetEventAction());
            addOrUpdateActionDialog.CloseDialog();
        }
    }

    void ShowDeleteDialog(FormItemEventActionContract item)
    {
        ViewModel.SelectedFormItemEventAction = item;
        deleteDialog.ShowDialog();
    }

    void DoDelete()
    {
        viewModel.DoDeleteSelected();
        deleteDialog.CloseDialog();
    }

    FormItemEventActionContract currentUpdate;
    void ShowUpdateDialog(FormItemEventActionContract item)
    {
        currentUpdate = item;
        addOrUpdateActionDialog.ShowDialog(() =>
        {
            AddOrUpdateEventActionView.ViewModel.CurrentFormItemAction = item;
            AddOrUpdateEventActionView.ViewModel.SelectedAction = AddOrUpdateEventActionView.actionsView.ViewModel.Actions.FirstOrDefault(x => x.Id == item.ActionId);
        });
    }
}
