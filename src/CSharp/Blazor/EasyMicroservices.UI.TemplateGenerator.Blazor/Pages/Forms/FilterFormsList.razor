@page "/FilterFormsList"
@using EasyMicroservices.UI.BlazorComponents;
@using EasyMicroservices.UI.Cores;
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Forms;
@using MudBlazor;
@using global::TemplateGenerators.GeneratedServices;
@inject FilterFormsListViewModel viewModel;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudDataGrid T="FormContract" ServerData="LoadGridData" MultiSelection="true" OverscanCount="viewModel.TotalCount" Items="viewModel.Forms" SortMode="SortMode.Multiple" Filterable="true"
                 Hideable="true">
        <ToolBarContent>
            <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddDialog()" />
                <MudText Typo="Typo.h6" mar>@viewModel.GetInnerTranslatedByKey("Forms")</MudText>
                </MudStack>

                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="@viewModel.GetInnerTranslatedByKey("Search")" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SearchCommand.Execute(null)">
                    @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Processing")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetInnerTranslatedByKey("Search")</MudText>
                }
            </MudButton>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="FormContract" />
            <PropertyColumn Property="x => x.Id" Title="@viewModel.GetInnerTranslatedByKey("Id")" />
            <PropertyColumn Property="x => x.Name" Title="@viewModel.GetInnerTranslatedByKey("Name")" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="(arg) => ShowUpdateDialog(context.Item)" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="FormContract" />
        </PagerContent>
    </MudDataGrid>
    <BaseDialog @ref="addDialog">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> @_AddOrUpdateTitle
            </MudText>
        </TitleContent>
        <DialogContent>
            <AddOrUpdateForm @ref="addOrUpdateFormView" />
        </DialogContent>
    </BaseDialog>
    <BaseDialog @ref="deleteDialog">
        <TitleContent>
            <MudText>
                @viewModel.GetInnerTranslatedByKey("DeleteForm_Title")
            </MudText>
        </TitleContent>
        <DialogContent>
            @viewModel.GetInnerTranslatedByKey("DeleteQuestion_Content")
        </DialogContent>
        <DialogActions>
            @if (!viewModel.IsBusy)
            {
                <MudButton OnClick="() => deleteDialog.CloseDialog()">@viewModel.GetInnerTranslatedByKey("Cancel")</MudButton>
            }
            <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="()=>DoDelete()">
                @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Deleting")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetInnerTranslatedByKey("Delete")</MudText>
                }
            </MudButton>
        </DialogActions>
    </BaseDialog>
</MudRTLProvider>

@code {
    AddOrUpdateForm addOrUpdateFormView;
    BaseDialog addDialog;
    BaseDialog deleteDialog;
    private string _searchString;
    private string _AddOrUpdateTitle;
    private string _AddOrUpdatedMessage;

    protected override async Task OnInitializedAsync()
    {
        viewModel.BindPropertyChanged(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private async Task<GridData<FormContract>> LoadGridData(GridState<FormContract> state)
    {
        viewModel.Index = state.Page * 10;
        viewModel.Length = state.PageSize;
        await viewModel.SearchCommand.ExecuteAsync(null);
        GridData<FormContract> data = new()
            {
                Items = viewModel.Forms,
                TotalItems = viewModel.TotalCount
            };

        return data;
    }

    void ShowUpdateDialog(FormContract formContract)
    {
        _AddOrUpdateTitle = @viewModel.GetInnerTranslatedByKey("UpdateForm_Title");
        _AddOrUpdatedMessage = @viewModel.GetInnerTranslatedByKey("UpdateForm_Message");
        ShowAddOrUpdateDialog(formContract);
    }

    void ShowAddDialog()
    {
        _AddOrUpdateTitle = @viewModel.GetInnerTranslatedByKey("AddForm_Title");
        _AddOrUpdatedMessage = @viewModel.GetInnerTranslatedByKey("AddForm_Message");
        ShowAddOrUpdateDialog(null);
    }

    void ShowAddOrUpdateDialog(FormContract formContract)
    {
        addDialog.ShowDialog(() =>
        {
            addOrUpdateFormView.ViewModel.Clear();
            addOrUpdateFormView.ViewModel.UpdateFormContract = formContract;
            addOrUpdateFormView.ViewModel.OnSuccess = () =>
            {
                addDialog.CloseDialog();
                viewModel.SearchCommand.Execute(null);
                Snackbar.Add(_AddOrUpdatedMessage, Severity.Success);
            };
        });
    }

    void ShowDeleteDialog(FormContract formContract)
    {
        viewModel.SelectedFormContract = formContract;
        deleteDialog.ShowDialog();
    }

    void DoDelete()
    {
        viewModel.OnDelete = (o) =>
        {
            deleteDialog.CloseDialog();
            StateHasChanged();
            Snackbar.Add(@viewModel.GetInnerTranslatedByKey("DeleteForm_Message"), Severity.Success);
        };
        viewModel.DeleteCommand.Execute(viewModel.SelectedFormContract);
    }

    void CloseDeleteDialog(FormContract formContract)
    {
        deleteDialog.CloseDialog();
    }
}
