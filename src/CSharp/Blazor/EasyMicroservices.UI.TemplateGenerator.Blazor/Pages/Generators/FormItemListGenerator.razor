@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.Blazor.Interfaces
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Generators
@using MudBlazor
@using TemplateGenerators.GeneratedServices
@inject FormItemListGeneratorViewModel viewModel;
@inject IComponentPool ComponentPool;
@implements IParentComponent

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudStack>
        @foreach (var formItem in viewModel.FormItems?.OrderBy(x => x.Index))
        {
            <FormItemSingleItemGenerator @ref="Control" FormItem="@formItem" />
        }
    </MudStack>
</MudRTLProvider>

@code {
    public FormItemListGeneratorViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    [Parameter]
    [Category("Behavior")]
    public ICollection<FormItemContract> FormItems
    {
        set
        {
            _ = viewModel.InitializeFormItems(value);
        }
    }

    [Parameter]
    [Category("Behavior")]
    public FormItemContract FormItem
    {
        set
        {
            viewModel.FormItem = value;
            _ = viewModel.InitializeFormItems(value.Items);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (Parent != null && viewModel.FormItem != null)
            ComponentPool.SetParent(Parent, this, viewModel.FormItem);

        if (Controls.Count == viewModel.FormItems.Count)
        {
            foreach (var item in Controls)
            {
                item.Parent = this;
                ComponentPool.SetParent(this, item, ((FormItemSingleItemGenerator)item).ViewModel.FormItem);
            }
        }
    }

    List<IParentComponent> Controls = new List<IParentComponent>();
    public IParentComponent Control
    {
        set
        {
            if (!Controls.Contains(value))
                Controls.Add(value);
        }
    }

    public IParentComponent Parent { get; set; }

    public object ValueInstance
    {
        get
        {
            return viewModel.FormItem;
        }
    }
}
