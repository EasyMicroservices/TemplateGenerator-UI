@using EasyMicroservices.UI.Cores
@using EasyMicroservices.UI.TemplateGenerator.Blazor.Pages.Generators.Components
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.Generators
@using MudBlazor
@using TemplateGenerators.GeneratedServices
@inject FormItemSingleItemGeneratorViewModel viewModel;

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    @switch (viewModel.FormItem?.Type)
    {
        case ItemType.TextBox:
            {
                <TextBoxFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.OptionList:
            {
                <SingleSelectFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.DateOnly:
            {
                <DateOnlyFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.Card:
            {
                <CardFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.Button:
            {
                <ButtonFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.HorizontalStack:
            {
                <HorizontalStackFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.VerticalStack:
            {
                <VerticalStackFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.CheckBox:
            {
                <CheckBoxFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.CheckList:
            {
                <MultipleSelectFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.Label:
            {
                <LabelFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.DateTime:
            {
                <DateTimeFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.TimeOnly:
            {
                <TimeOnlyFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.Table:
            {
                <DataGridFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.NavMenu:
            {
                <NavMenuFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.NavMenuGroup:
            {
                <NavMenuGroupFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        case ItemType.NavMenuLink:
            {
                <NavMenuLinkFormItem FormItem="@viewModel.FormItem" />
                break;
            }
        default:
            {
                if (viewModel.FormItem != null)
                    throw new NotSupportedException($"Form item type: {viewModel.FormItem?.Type} not supported!");
                break;
            }
    }
</MudRTLProvider>

@code {
    public FormItemSingleItemGeneratorViewModel ViewModel
    {
        get
        {
            return viewModel;
        }
    }

    [Parameter]
    [Category("Behavior")]
    public FormItemContract FormItem
    {
        set
        {
            viewModel.FormItem = value;
        }
    }
}
