@page "/FilterNoParentFormItemsList"
@using EasyMicroservices.ServiceContracts
@using EasyMicroservices.UI.BlazorComponents;
@using EasyMicroservices.UI.Cores;
@using EasyMicroservices.UI.TemplateGenerator.Blazor.Pages.FormItems;
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.FormItems;
@using EasyMicroservices.UI.TemplateGenerator.ViewModels.NoParentFormItems;
@using EasyMicroservices.UI.Cores.Commands;
@using MudBlazor;
@using global::TemplateGenerators.GeneratedServices;
@inject FilterNoParentFormItemsListViewModel viewModel;
@inject NoParentFormItemClient noParentFormItemClient;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudRTLProvider RightToLeft="BaseViewModel.IsRightToLeft">
    <MudDataGrid T="FormItemContract" ServerData="LoadGridData" MultiSelection="true" OverscanCount="viewModel.TotalCount" Items="viewModel.Items" SortMode="SortMode.Multiple" Filterable="true"
                 Hideable="true">
        <ToolBarContent>
            <MudStack AlignItems="AlignItems.Center" Row="true" Spacing="5">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(arg) => ShowAddDialog()" />
                <MudText Typo="Typo.h6" mar>@viewModel.GetInnerTranslatedByKey("NoParentFormItems")</MudText>
                </MudStack>

                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="@viewModel.GetInnerTranslatedByKey("Search")" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Disabled="viewModel.IsBusy" OnClick="(arg) => viewModel.SearchCommand.Execute(null)">
                    @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Processing")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetInnerTranslatedByKey("Search")</MudText>
                }
            </MudButton>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="FormItemContract" />
            <PropertyColumn Property="x => x.Id" Title="@viewModel.GetInnerTranslatedByKey("Id")" />
            <PropertyColumn Property="x => x.Title" Title="@viewModel.GetInnerTranslatedByKey("Title")" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Disabled="viewModel.IsBusy" Size="@Size.Small" OnClick="(arg) => ShowUpdateDialog(context.Item)">
                        @if (viewModel.IsBusy)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Outlined.Edit"/>
                        }
                    </MudIconButton>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="(arg) => ShowDeleteDialog(context.Item)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="FormItemContract" />
        </PagerContent>
    </MudDataGrid>
    <BaseDialog @ref="addDialog">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> @_AddOrUpdateTitle
            </MudText>
        </TitleContent>
        <DialogContent>
            <AddOrUpdateFormItem @ref="addOrUpdateFormItemView" />
        </DialogContent>
    </BaseDialog>
    <BaseDialog @ref="deleteDialog">
        <TitleContent>
            <MudText>
                @viewModel.GetInnerTranslatedByKey("DeleteNoParentFormItem_Title")
            </MudText>
        </TitleContent>
        <DialogContent>
            @viewModel.GetInnerTranslatedByKey("DeleteQuestion_Content")
        </DialogContent>
        <DialogActions>
            @if (!viewModel.IsBusy)
            {
                <MudButton OnClick="() => deleteDialog.CloseDialog()">@viewModel.GetInnerTranslatedByKey("Cancel")</MudButton>
            }
            <MudButton Color="Color.Error" Variant="Variant.Filled" Disabled="viewModel.IsBusy" OnClick="()=>DoDelete()">
                @if (viewModel.IsBusy)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@viewModel.GetInnerTranslatedByKey("Deleting")</MudText>
                }
                else
                {
                    <MudText>@viewModel.GetInnerTranslatedByKey("Delete")</MudText>
                }
            </MudButton>
        </DialogActions>
    </BaseDialog>
</MudRTLProvider>

@code {
    AddOrUpdateFormItem addOrUpdateFormItemView;

    BaseDialog addDialog;
    BaseDialog deleteDialog;
    private string _searchString;
    private string _AddOrUpdateTitle;
    private string _AddOrUpdatedMessage;

    protected override async Task OnInitializedAsync()
    {
        viewModel.BindPropertyChanged(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private async Task<GridData<FormItemContract>> LoadGridData(GridState<FormItemContract> state)
    {
        viewModel.Index = state.Page * 10;
        viewModel.Length = state.PageSize;
        await viewModel.SearchCommand.ExecuteAsync(null);
        GridData<FormItemContract> data = new()
            {
                Items = viewModel.Items,
                TotalItems = viewModel.TotalCount
            };

        return data;
    }

    async Task ShowUpdateDialog(FormItemContract noParentFormItemContract)
    {
        if (noParentFormItemContract != null)
        {
            try
            {
                viewModel.IsBusy = true;
                noParentFormItemContract = await noParentFormItemClient.GetByIdAsync(new Int64GetByIdRequestContract()
                    {
                        Id = noParentFormItemContract.Id
                    }).AsCheckedResult(x => x.Result);
            }
            finally
            {
                viewModel.IsBusy = false;
            }
        }
        _AddOrUpdateTitle = @viewModel.GetInnerTranslatedByKey("UpdateNoParentFormItem_Title");
        _AddOrUpdatedMessage = @viewModel.GetInnerTranslatedByKey("UpdateNoParentFormItem_Message");
        ShowAddOrUpdateDialog(noParentFormItemContract);
    }

    void ShowAddDialog()
    {
        _AddOrUpdateTitle = @viewModel.GetInnerTranslatedByKey("AddNoParentFormItem_Title");
        _AddOrUpdatedMessage = @viewModel.GetInnerTranslatedByKey("AddNoParentFormItem_Message");
        ShowAddOrUpdateDialog(null);
    }

    void ShowAddOrUpdateDialog(FormItemContract noParentFormItemContract)
    {
        addDialog.ShowDialog(() =>
        {
            var vm = addOrUpdateFormItemView.ViewModel;
            vm.SaveCommand = new TaskRelayCommand(vm, vm.SaveNotParentToService);
            vm.Clear();
            vm.UpdateFormItemContract = noParentFormItemContract;
            vm.OnSuccess = (item) =>
            {
                addDialog.CloseDialog();
                viewModel.SearchCommand.Execute(null);
                Snackbar.Add(_AddOrUpdatedMessage, Severity.Success);
            };
        });
    }

    void ShowDeleteDialog(FormItemContract noParentFormItemContract)
    {
        viewModel.SelectedFormItemContract = noParentFormItemContract;
        deleteDialog.ShowDialog();
    }

    void DoDelete()
    {
        viewModel.OnDelete = (o) =>
        {
            deleteDialog.CloseDialog();
            StateHasChanged();
            Snackbar.Add(@viewModel.GetInnerTranslatedByKey("DeleteNoParentFormItem_Message"), Severity.Success);
        };
        viewModel.DeleteCommand.Execute(viewModel.SelectedFormItemContract);
    }

    void CloseDeleteDialog(FormItemContract noParentFormItemContract)
    {
        deleteDialog.CloseDialog();
    }
}
